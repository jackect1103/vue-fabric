// vite.config.js
import * as path from "path";
import { defineConfig, loadEnv } from "file:///E:/%E6%B5%8B%E8%AF%95/vue-fabric/node_modules/vite/dist/node/index.js";

// vite/build.js
function build(env) {
  return {
    sourcemap: env.VITE_BUILD_SOURCEMAP,
    terserOptions: {
      // 生产环境打包配置
      // 去除 console debugger
      compress: {
        drop_console: env.VITE_DROP_CONSOLE
      }
    }
  };
}

// vite/server.js
function createServer(env) {
  return {
    port: 3e3,
    // open: true, // 生产环境不要设置打开浏览器，测试环境可以
    cors: true,
    proxy: {
      "/api": {
        target: env.VITE_CLOUD_BASE_URL,
        changeOrigin: env.VITE_OPEN_PROXY,
        rewrite: (path2) => path2.replace(/^\/api/, "")
      }
    }
  };
}

// vite.config.js
import vue from "file:///E:/%E6%B5%8B%E8%AF%95/vue-fabric/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "@vitejs/plugin-vue-jsx";
import VueSetupExtend from "vite-plugin-vue-setup-extend";
import postCssPxToRem from "file:///E:/%E6%B5%8B%E8%AF%95/vue-fabric/node_modules/postcss-pxtorem/index.js";
var __vite_injected_original_dirname = "E:\\\u6D4B\u8BD5\\vue-fabric";
var vite_config_default = defineConfig((command, mode) => {
  const env = loadEnv(mode, process.cwd());
  return {
    plugins: [vue(), vueJsx(), VueSetupExtend()],
    css: {
      postcss: {
        plugins: [
          postCssPxToRem({
            rootValue: 192,
            // 1rem，根据 设计稿宽度/10 进行设置
            propList: ["*"]
            // 需要转换的属性，这里选择全部都进行转换
          })
        ]
      }
    },
    resolve: {
      // 设置别名
      alias: {
        "@": path.resolve(__vite_injected_original_dirname, "src")
      }
    },
    extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json"],
    // preview 状态下的端口相关设置 package.json配置这边 脚步指令 "preview": "vite preview"
    // 执行 npm run build指令后打包生成dist 然后运行 npm run preview 在本地起项目 查看打包后的效果 （把dist部署到 本地的服务器上）
    preview: {
      port: 3e3,
      host: "0.0.0.0",
      strictPort: true
    },
    server: createServer(env),
    build: build(env)
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAidml0ZS9idWlsZC5qcyIsICJ2aXRlL3NlcnZlci5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkU6XFxcXFx1NkQ0Qlx1OEJENVxcXFx2dWUtZmFicmljXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxcdTZENEJcdThCRDVcXFxcdnVlLWZhYnJpY1xcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovJUU2JUI1JThCJUU4JUFGJTk1L3Z1ZS1mYWJyaWMvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXHJcbmltcG9ydCB7IGRlZmluZUNvbmZpZywgbG9hZEVudiB9IGZyb20gJ3ZpdGUnXHJcbmltcG9ydCB7IGJ1aWxkIH0gZnJvbSAnLi92aXRlL2J1aWxkJ1xyXG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXIgfSBmcm9tICcuL3ZpdGUvc2VydmVyJ1xyXG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSdcclxuaW1wb3J0IHZ1ZUpzeCBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUtanN4J1xyXG5pbXBvcnQgVnVlU2V0dXBFeHRlbmQgZnJvbSAndml0ZS1wbHVnaW4tdnVlLXNldHVwLWV4dGVuZCcgLy8gXHU3RUM0XHU0RUY2XHU1NDBEXHJcbmltcG9ydCBwb3N0Q3NzUHhUb1JlbSBmcm9tIFwicG9zdGNzcy1weHRvcmVtXCI7XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKGNvbW1hbmQsIG1vZGUpID0+IHtcclxuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCkpIC8vIFx1NUY1M1x1NTI0RFx1NzNBRlx1NTg4M1x1NTNEOFx1OTFDRlxyXG4gIHJldHVybiB7XHJcbiAgICBwbHVnaW5zOiBbdnVlKCksIHZ1ZUpzeCgpLCBWdWVTZXR1cEV4dGVuZCgpXSxcclxuICAgIGNzczoge1xyXG4gICAgICBwb3N0Y3NzOiB7XHJcbiAgICAgICAgcGx1Z2luczogW1xyXG4gICAgICAgICAgcG9zdENzc1B4VG9SZW0oe1xyXG4gICAgICAgICAgICByb290VmFsdWU6IDE5MiwgLy8gMXJlbVx1RkYwQ1x1NjgzOVx1NjM2RSBcdThCQkVcdThCQTFcdTdBM0ZcdTVCQkRcdTVFQTYvMTAgXHU4RkRCXHU4ODRDXHU4QkJFXHU3RjZFXHJcbiAgICAgICAgICAgIHByb3BMaXN0OiBbJyonXSwgLy8gXHU5NzAwXHU4OTgxXHU4RjZDXHU2MzYyXHU3Njg0XHU1QzVFXHU2MDI3XHVGRjBDXHU4RkQ5XHU5MUNDXHU5MDA5XHU2MkU5XHU1MTY4XHU5MEU4XHU5MEZEXHU4RkRCXHU4ODRDXHU4RjZDXHU2MzYyXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHJlc29sdmU6IHtcclxuICAgICAgLy8gXHU4QkJFXHU3RjZFXHU1MjJCXHU1NDBEXHJcbiAgICAgIGFsaWFzOiB7XHJcbiAgICAgICAgJ0AnOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJyksXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBleHRlbnNpb25zOiBbJy5tanMnLCAnLmpzJywgJy50cycsICcuanN4JywgJy50c3gnLCAnLmpzb24nXSxcclxuICAgIC8vIHByZXZpZXcgXHU3MkI2XHU2MDAxXHU0RTBCXHU3Njg0XHU3QUVGXHU1M0UzXHU3NkY4XHU1MTczXHU4QkJFXHU3RjZFIHBhY2thZ2UuanNvblx1OTE0RFx1N0Y2RVx1OEZEOVx1OEZCOSBcdTgxMUFcdTZCNjVcdTYzMDdcdTRFRTQgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCJcclxuICAgIC8vIFx1NjI2N1x1ODg0QyBucG0gcnVuIGJ1aWxkXHU2MzA3XHU0RUU0XHU1NDBFXHU2MjUzXHU1MzA1XHU3NTFGXHU2MjEwZGlzdCBcdTcxMzZcdTU0MEVcdThGRDBcdTg4NEMgbnBtIHJ1biBwcmV2aWV3IFx1NTcyOFx1NjcyQ1x1NTczMFx1OEQ3N1x1OTg3OVx1NzZFRSBcdTY3RTVcdTc3MEJcdTYyNTNcdTUzMDVcdTU0MEVcdTc2ODRcdTY1NDhcdTY3OUMgXHVGRjA4XHU2MjhBZGlzdFx1OTBFOFx1N0Y3Mlx1NTIzMCBcdTY3MkNcdTU3MzBcdTc2ODRcdTY3MERcdTUyQTFcdTU2NjhcdTRFMEFcdUZGMDlcclxuICAgIHByZXZpZXc6IHtcclxuICAgICAgcG9ydDogMzAwMCxcclxuICAgICAgaG9zdDogJzAuMC4wLjAnLFxyXG4gICAgICBzdHJpY3RQb3J0OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHNlcnZlcjogY3JlYXRlU2VydmVyKGVudiksXHJcbiAgICBidWlsZDogYnVpbGQoZW52KSxcclxuICB9XHJcbn0pXHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcXHU2RDRCXHU4QkQ1XFxcXHZ1ZS1mYWJyaWNcXFxcdml0ZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcXHU2RDRCXHU4QkQ1XFxcXHZ1ZS1mYWJyaWNcXFxcdml0ZVxcXFxidWlsZC5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovJUU2JUI1JThCJUU4JUFGJTk1L3Z1ZS1mYWJyaWMvdml0ZS9idWlsZC5qc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGQoZW52KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNvdXJjZW1hcDogZW52LlZJVEVfQlVJTERfU09VUkNFTUFQLFxyXG4gICAgdGVyc2VyT3B0aW9uczoge1xyXG4gICAgICAvLyBcdTc1MUZcdTRFQTdcdTczQUZcdTU4ODNcdTYyNTNcdTUzMDVcdTkxNERcdTdGNkVcclxuICAgICAgLy8gXHU1M0JCXHU5NjY0IGNvbnNvbGUgZGVidWdnZXJcclxuICAgICAgY29tcHJlc3M6IHtcclxuICAgICAgICBkcm9wX2NvbnNvbGU6IGVudi5WSVRFX0RST1BfQ09OU09MRSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfVxyXG59XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcXHU2RDRCXHU4QkQ1XFxcXHZ1ZS1mYWJyaWNcXFxcdml0ZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcXHU2RDRCXHU4QkQ1XFxcXHZ1ZS1mYWJyaWNcXFxcdml0ZVxcXFxzZXJ2ZXIuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6LyVFNiVCNSU4QiVFOCVBRiU5NS92dWUtZmFicmljL3ZpdGUvc2VydmVyLmpzXCI7ZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlcnZlcihlbnYpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcG9ydDogMzAwMCxcclxuICAgIC8vIG9wZW46IHRydWUsIC8vIFx1NzUxRlx1NEVBN1x1NzNBRlx1NTg4M1x1NEUwRFx1ODk4MVx1OEJCRVx1N0Y2RVx1NjI1M1x1NUYwMFx1NkQ0Rlx1ODlDOFx1NTY2OFx1RkYwQ1x1NkQ0Qlx1OEJENVx1NzNBRlx1NTg4M1x1NTNFRlx1NEVFNVxyXG4gICAgY29yczogdHJ1ZSxcclxuICAgIHByb3h5OiB7XHJcbiAgICAgICcvYXBpJzoge1xyXG4gICAgICAgIHRhcmdldDogZW52LlZJVEVfQ0xPVURfQkFTRV9VUkwsXHJcbiAgICAgICAgY2hhbmdlT3JpZ2luOiBlbnYuVklURV9PUEVOX1BST1hZLFxyXG4gICAgICAgIHJld3JpdGU6IHBhdGggPT4gcGF0aC5yZXBsYWNlKC9eXFwvYXBpLywgJycpLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUF3UCxZQUFZLFVBQVU7QUFDOVEsU0FBUyxjQUFjLGVBQWU7OztBQ0EvQixTQUFTLE1BQU0sS0FBSztBQUN6QixTQUFPO0FBQUEsSUFDTCxXQUFXLElBQUk7QUFBQSxJQUNmLGVBQWU7QUFBQTtBQUFBO0FBQUEsTUFHYixVQUFVO0FBQUEsUUFDUixjQUFjLElBQUk7QUFBQSxNQUNwQjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7OztBQ1pzUSxTQUFTLGFBQWEsS0FBSztBQUMvUixTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUE7QUFBQSxJQUVOLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxNQUNMLFFBQVE7QUFBQSxRQUNOLFFBQVEsSUFBSTtBQUFBLFFBQ1osY0FBYyxJQUFJO0FBQUEsUUFDbEIsU0FBUyxDQUFBQSxVQUFRQSxNQUFLLFFBQVEsVUFBVSxFQUFFO0FBQUEsTUFDNUM7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGOzs7QUZUQSxPQUFPLFNBQVM7QUFDaEIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sb0JBQW9CO0FBQzNCLE9BQU8sb0JBQW9CO0FBUDNCLElBQU0sbUNBQW1DO0FBVXpDLElBQU8sc0JBQVEsYUFBYSxDQUFDLFNBQVMsU0FBUztBQUM3QyxRQUFNLE1BQU0sUUFBUSxNQUFNLFFBQVEsSUFBSSxDQUFDO0FBQ3ZDLFNBQU87QUFBQSxJQUNMLFNBQVMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLGVBQWUsQ0FBQztBQUFBLElBQzNDLEtBQUs7QUFBQSxNQUNILFNBQVM7QUFBQSxRQUNQLFNBQVM7QUFBQSxVQUNQLGVBQWU7QUFBQSxZQUNiLFdBQVc7QUFBQTtBQUFBLFlBQ1gsVUFBVSxDQUFDLEdBQUc7QUFBQTtBQUFBLFVBQ2hCLENBQUM7QUFBQSxRQUNIO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVM7QUFBQTtBQUFBLE1BRVAsT0FBTztBQUFBLFFBQ0wsS0FBVSxhQUFRLGtDQUFXLEtBQUs7QUFBQSxNQUNwQztBQUFBLElBQ0Y7QUFBQSxJQUNBLFlBQVksQ0FBQyxRQUFRLE9BQU8sT0FBTyxRQUFRLFFBQVEsT0FBTztBQUFBO0FBQUE7QUFBQSxJQUcxRCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixZQUFZO0FBQUEsSUFDZDtBQUFBLElBQ0EsUUFBUSxhQUFhLEdBQUc7QUFBQSxJQUN4QixPQUFPLE1BQU0sR0FBRztBQUFBLEVBQ2xCO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicGF0aCJdCn0K
